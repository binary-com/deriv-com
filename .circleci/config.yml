version: 2.1
orbs:
  k8s: circleci/kubernetes@0.7.0
  slack: circleci/slack@3.4.2
commands:
  git_checkout_from_cache:
    description: "Git checkout and save cache"
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - run:
          name: Fetch git tags
          command: |
            mkdir -p ~/.ssh
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
            # Fetch tags if git cache is present
            if [ -e /home/circleci/project/.git ]
            then
              git fetch origin --tags
            fi
      - checkout
      - run:
          name: Compress git objects
          command: git gc
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
  npm_install_from_cache:
    description: "npm install and save cache"
    steps:
      - restore_cache:
          keys:
            - node-{{ checksum "package-lock.json" }}
            - node-
      - run:
          name: Install npm packages
          command: npm ci
      - save_cache:
          key: node-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
  npm_test:
    description: "Run npm test"
    steps:
      - run:
          name: "Run test"
          command: npm test
  build:
    description: "Build"
    steps:
      - run:
          name: "Run build"
          command: npm run build
  deploy:
    description: "Deploy to static branches"
    parameters:
      target_branch:
        type: string
    steps:
      - attach_workspace:
          at: public
      - run:
          name: Tag build
          command: echo "<< parameters.target_branch >>-$(date -u +'%Y-%m-%dT%H:%M:%SZ')" > public/version
      - run:
          name: Install and configure dependencies
          command: |
            mkdir "${HOME}/.npm-packages"
            npm config set prefix "${HOME}/.npm-packages"
            npm i -g gh-pages
            git config user.email "ci-build@binary.com"
            git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "01:67:4a:6d:26:9c:70:c4:1a:60:91:88:d9:dd:f0:83"
      - run:
          name: Deploy docs to gh-pages branch
          command: /home/circleci/.npm-packages/bin/gh-pages -d public --branch << parameters.target_branch >> --message '[skip ci]'

  notify_slack:
    description: "Notify slack"
    steps:
      - slack/status:
          include_project_field: false
          failure_message: "Release failed for *Deriv.com* with version *$(cat public/version)*"
          success_message: "Release succeeded for *Deriv.com* with version *$(cat public/version)*"
          webhook: ${SLACK_WEBHOOK}

  docker_build:
    description: "Build Docker image"
    parameters:
      docker_image_tag:
        type: string
        default: "latest-staging"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Building docker image
          command: |
            docker build -t ${DOCKHUB_ORGANISATION}/deriv-com:${CIRCLE_TAG} -t ${DOCKHUB_ORGANISATION}/deriv-com:<< parameters.docker_image_tag >> .


  docker_build_staging:
    description: "Build Docker image"
    parameters:
      docker_image_tag:
        type: string
        default: "latest-staging"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Building docker image
          command: |
            docker build -t ${DOCKHUB_ORGANISATION}/deriv-com:${CIRCLE_SHA1} -t ${DOCKHUB_ORGANISATION}/deriv-com:<< parameters.docker_image_tag >> .

  docker_push:
    description: "Push image to docker hub"
    steps:
      - run:
          name: Pushing Image to docker hub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${DOCKHUB_ORGANISATION}/deriv-com

  k8s_deploy:
    description: "Deploy to k8s cluster"
    parameters:
      k8s_svc_name:
        type: string
        default: "staging-deriv-com"
    steps:
      - k8s/install-kubectl
      - run:
          name: Deploying to k8s cluster for service << parameters.k8s_svc_name >>
          command: |
            echo $CA_CRT | base64 --decode > ca.crt
            kubectl --server=${KUBE_SERVER} --certificate-authority=ca.crt --token=$SERVICEACCOUNT_TOKEN set image deployment/<< parameters.k8s_svc_name >> << parameters.k8s_svc_name >>=${DOCKHUB_ORGANISATION}/deriv-com:${CIRCLE_TAG}

  k8s_deploy_staging:
    description: "Deploy to k8s cluster"
    parameters:
      k8s_svc_name:
        type: string
        default: "staging-deriv-com"
    steps:
      - k8s/install-kubectl
      - run:
          name: Deploying to k8s cluster for service << parameters.k8s_svc_name >>
          command: |
            echo $CA_CRT | base64 --decode > ca.crt
            kubectl --server=${KUBE_SERVER} --certificate-authority=ca.crt --token=$SERVICEACCOUNT_TOKEN set image deployment/<< parameters.k8s_svc_name >> << parameters.k8s_svc_name >>=${DOCKHUB_ORGANISATION}/deriv-com:${CIRCLE_SHA1}

jobs:
  test:
    docker:
      - image: circleci/node:lts-stretch
        environment:
          - GATSBY_CPU_COUNT=2
          - GATSBY_MAP_API_KEY=${GATSBY_MAP_API_KEY}
          - GATSBY_ENV=staging
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - npm_test
      - build

  release_staging:
    docker:
      - image: circleci/node:lts-stretch
        environment:
          - GATSBY_CPU_COUNT=2
          - GATSBY_MAP_API_KEY=${GATSBY_MAP_API_KEY}
          - GATSBY_ENV=staging
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - npm_test
      - build
      - deploy:
          target_branch: "staging"
      - docker_build_staging
      - docker_push
      - k8s_deploy_staging
      - notify_slack

  release_production:
    docker:
      - image: circleci/node:lts-stretch
        environment:
          - GATSBY_CPU_COUNT=2
          - GATSBY_MAP_API_KEY=${GATSBY_MAP_API_KEY}
          - GATSBY_ENV=production
    steps:
      - git_checkout_from_cache
      - npm_install_from_cache
      - npm_test
      - build
      - deploy:
          target_branch: "production"
      - docker_build:
          docker_image_tag: latest
      - docker_push
      - k8s_deploy:
          k8s_svc_name: "production-deriv-com"
      - notify_slack

workflows:
  build_and_push_dev:
    jobs:
      - test:
          filters:
            branches:
              only: /^master/

  release_staging:
    jobs:
      - release_staging:
          context: binary-frontend-artifact-upload
          filters:
            branches:
              only: /^master/

  release_production:
    jobs:
      - release_production:
          context: binary-frontend-artifact-upload
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^production.*/
