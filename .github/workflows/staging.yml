name: Release Staging

on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GATSBY_CPU_COUNT: 2
  GATSBY_ENV: staging
  DIRECTUS_AUTH_TOKEN: ${{ secrets.DIRECTUS_AUTH_TOKEN }}
  GATSBY_DIRECTUS_AUTH_TOKEN: ${{ secrets.GATSBY_DIRECTUS_AUTH_TOKEN }}
  GATSBY_ENV_CIO_SITE_ID: ${{ secrets.GATSBY_ENV_CIO_SITE_ID }}

jobs:
  lint:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2.3.1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: "npm"

      - name: Install Node.js dependencies
        run: |
          npm ci
          npm test

  release-staging:
    needs: lint
    timeout-minutes: 30
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2.3.1

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "14.x"
          cache: "npm"

      - run: npm ci
      - run: npm run format
      - run: npm run test
      - run: npm run build
      - run: npm run build:storybook
      - uses: olegtarasov/get-tag@v2.1
        id: tagName
        # For using same tag for staging and production we need to uncomment these two below lines:
        # with:
        #   tagRegex: "staging(.*)"
      - name: Building docker image üê≥
        run: docker build -t ${{ secrets.DOCKHUB_ORGANISATION }}/deriv-com:latest-staging -f Dockerfile.staging .

      - name: Verify nginx image
        run: |
          set -e
          docker run --rm ${{ secrets.DOCKHUB_ORGANISATION }}/deriv-com:$GITHUB_SHA nginx -t
          echo "docker image validated successfully"

      - name: Pushing Image to docker hub üê≥
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }}| docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push  ${{ secrets.DOCKHUB_ORGANISATION }}/deriv-com:latest-staging
          docker push  ${{ secrets.DOCKHUB_ORGANISATION }}/deriv-com:$GITHUB_SHA

      - name: Deploy üöÄ
        run: |
          export NAMESPACE="deriv-com-staging"
          export SERVICEACCOUNT_TOKEN=${{ secrets.SERVICEACCOUNT_TOKEN }}
          export DOCKERHUB_ORGANISATION=${{ secrets.DOCKERHUB_ORGANISATION }}
          export KUBE_SERVER=${{ secrets.KUBE_SERVER }}
          export CA=${{ secrets.CA }}
          git clone https://github.com/binary-com/devops-ci-scripts
          cd devops-ci-scripts/k8s-build_tools
          echo ${{ secrets.CA_CRT}} | base64 --decode > ca.crt
          ./release.sh deriv-com $GITHUB_SHA

      - name: Deploy to Cloudflare ‚òÅÔ∏è
        uses: cloudflare/wrangler-action@2.0.0
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages publish public --project-name=deriv-com-pages --branch=staging

      - name: Cloudflare preview link ‚ú®
        run: echo "New staging website - http://staging.cf-pages-deriv-com.deriv.com"

      - name: Slack Notification üì£
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: workflow,repo
          if_mention: failure,cancelled
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `Release for *Deriv.com* with version *$GITHUB_SHA*`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
