# Git best practices

**In this document:**

- [Commit message guidelines](#commit-message-guidlines)
  - [Type](#type)
- [Changing base branch](#changing-base-branch)
- [Get latest Changes](#get-latest-changes)
- [Resolve translation conflict on message.json](#resolve-translation-conflict-on-message.json)

## Commit message guidelines

We have a set of precise rules over how our git commit messages can be formatted. This leads to more **readable messages** that are easy to follow when looking through the **project history**.

Each commit message will consist of **type** and **subject**:

```sh
<type>|<...other_types>:<space><subject>
For example  "fix: hero image padding"
```

### Type

Must be one of the following:

- **build**: Changes that affect the build system or external dependencies (example scopes: gatsby config, gatsby browser, gatsby node, or gatsby ssr)
- **chore**: Add or Changes on packages or external dependencies
- **ci**: Changes to our CI configuration files and scripts (example scopes: Docker, nginx conf)
- **docs**: Documentation only changes
- **feat**: A new feature
- **fix**: A bug fix
- **perf**: A code change that improves performance
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
- **text**: Adding text or updating text only
- **empty**: Rare cases for re-deploying when the deployment server is down
- **revert**: A commit reverts a previous commit
